create table CUSM (
    fullName varchar2(32) not null,
    address varchar2 (128) not null,
    custid number primary key,
    age number,
    sex varchar2(1) CHECK (sex = 'm' or sex ='f'),
    phone varchar2(15) not null,
    email varchar2(64) not null,
    status varchar2(10) CHECK (status = 'Active' or status = 'Dormant' or status = 'Deceased')
)
PARTITION BY RANGE (age) (
    PARTITION young VALUES LESS THAN (18),
    PARTITION adult VALUES LESS THAN (60),
    PARTITION elder VALUES LESS THAN (MAXVALUE)
);

CREATE VIEW young AS
SELECT * from CUSM where (age < 19) ORDER BY age;

CREATE VIEW adult AS
SELECT * from CUSM where (age >= 19) and (age < 60) ORDER BY age;

CREATE VIEW elder AS
SELECT * from CUSM where (age >= 60) ORDER BY age;


/
create sequence users_id start with 1;

create or replace trigger users_id_increment
    before insert or update on CUSM
    for each row
begin
    if inserting and :new.custid is null then
    :new.custid := users_id.nextval;
    end if;
end;
/

create table accounts (
    accountNumber number constraint accounts_pk primary key,
    accountUser number not null,
    interestRate number,
    openingDate date,
    status varchar2(10) CHECK (status = 'Active' or status = 'Hold' or status =  'Closed'),
    balance number,
    accountType varchar2(3) CHECK (accountType = 'OD' or accountType = 'NOD'),
    CONSTRAINT fk_accountUser
    FOREIGN KEY (accountUser) REFERENCES CUSM(custid)
)
PARTITION BY REFERENCE (fk_accountUser);

/
create sequence account_numbers start with 1;

create or replace trigger account_numbers_increment
    before insert or update on accounts
    for each row
begin
    if inserting and :new.accountNumber is null then
    :new.accountNumber := account_numbers.nextval;
    end if;
end;
/

create table TXNM_table ( 
    transactionNumber number not null constraint txnm_table_pk primary key,  
    accountNumber number, 
    CONSTRAINT fk_account_number foreign key (accountNumber) REFERENCES accounts(accountNumber), 
    transactionDate date, 
    transactionType varchar2(1) CHECK (transactionType = 'D' or transactionType = 'C'), 
    amount number 
);

create sequence txnm_seq start with 1100001;

create or replace trigger transaction_counting 
    before insert or update on TXNM_table 
    for each row 
begin 
    if inserting and :new.transactionNumber is null then 
        :new.transactionNumber := txnm_seq.nextval; 
    end if; 
end;
/


ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-DD-MM';
